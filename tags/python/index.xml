<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on MadeByMe</title><link>https://madebyme.today/tags/python/</link><description>Recent content in Python on MadeByMe</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright 2023-2024, Kamil Rusin</copyright><lastBuildDate>Mon, 22 Jan 2024 19:34:37 +0100</lastBuildDate><atom:link href="https://madebyme.today/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Performance Analysis of Python's `dict()` and `{}`</title><link>https://madebyme.today/blog/python-dict-vs-curly-brackets/</link><pubDate>Mon, 22 Jan 2024 19:34:37 +0100</pubDate><guid>https://madebyme.today/blog/python-dict-vs-curly-brackets/</guid><category>Python</category><category>CPython</category><category>dictionaries</category><description>&lt;p>Some time ago, during a code review, I had a discussion with a colleague of mine about preferring &lt;code>dict()&lt;/code> over &lt;code>{}&lt;/code> in
new Python code. They argued that &lt;code>dict()&lt;/code> is more readable &amp;mdash; and expresses intent more clearly &amp;mdash; therefore should
be preferred. I wasn&amp;rsquo;t convinced by that, but at that time I didn&amp;rsquo;t have any counterarguments, so I passed.&lt;/p>
&lt;p>Yet that made me wonder: what&amp;rsquo;s the difference between the &lt;code>dict&lt;/code> type and &lt;code>{}&lt;/code> literal expression?&lt;/p>
&lt;p>Let&amp;rsquo;s go down the rabbit hole.&lt;/p>
&lt;div class="alert alert-info">
&lt;h6 class="alert-heading">
&lt;i class="bi bi-pencil me-2" aria-hidden="true">&lt;/i>
Note
&lt;/h6>
&lt;p class="my-3">
I&amp;rsquo;ll be using &lt;a
href="https://www.python.org/downloads/release/python-3120/"
>Python 3.12&lt;/a> for all code samples here. This is &lt;strong>really important&lt;/strong>, as there are
&lt;a
href="https://docs.python.org/3.12/whatsnew/changelog.html"
>significant differences&lt;/a> between recent minor Python versions.
&lt;/p>
&lt;/div>
&lt;h2 id="pythons-dictionaries" >
&lt;a href="#pythons-dictionaries" aria-label="Anchor">#&lt;/a>
Python&amp;rsquo;s dictionaries
&lt;/h2>
&lt;p>First, let&amp;rsquo;s check what&amp;rsquo;s the performance difference between the two methods. I&amp;rsquo;ll use the &lt;a
href="https://docs.python.org/3.12/library/timeit.html"
>&lt;code>timeit&lt;/code>&lt;/a>
module for that.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="ln" id="hl-0-1">&lt;a class="lnlinks" href="#hl-0-1">1&lt;/a>&lt;/span>&lt;span class="cl">$ python -m timeit &lt;span class="s2">&amp;#34;dict()&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-2">&lt;a class="lnlinks" href="#hl-0-2">2&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="m">10000000&lt;/span> loops, best of 5: &lt;span class="m">40&lt;/span> nsec per loop
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-3">&lt;a class="lnlinks" href="#hl-0-3">3&lt;/a>&lt;/span>&lt;span class="cl">$ python -m timeit &lt;span class="s2">&amp;#34;{}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-4">&lt;a class="lnlinks" href="#hl-0-4">4&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="m">20000000&lt;/span> loops, best of 5: 19.6 nsec per loop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>On my MacBook M1 the difference is &lt;strong>almost 2x&lt;/strong>. A non-trivial difference, especially knowing that both of these
expressions produce the exact same object.&lt;/p>
&lt;p>Where does the difference come from?&lt;/p>
&lt;p>Before we get into that, we need to sidetrack a little bit and talk about what happens when you execute Python code.
Python is an &lt;a
href="https://en.wikipedia.org/wiki/Scripting_language"
>interpreted language&lt;/a> &amp;mdash; it needs to have an interpreter. &lt;a
href="https://github.com/python/cpython/tree/v3.12.0"
>CPython&lt;/a> is
the most wildly used interpreter of Python; it&amp;rsquo;s a reference implementation, meaning that other interpreters use it to
determine the &amp;ldquo;correct&amp;rdquo; behavior. If you&amp;rsquo;ve installed Python from a default distribution, you have CPython installed on
your machine.&lt;/p>
&lt;p>Interestingly, CPython is both a compiler and an interpreter. When executing Python code it first compiles it into
&lt;a
href="https://docs.python.org/3.12/library/dis.html#python-bytecode-instructions"
>bytecode&lt;/a> instructions and interprets them.&lt;/p>
&lt;p>To better understand the performance difference between &lt;code>dist()&lt;/code> and &lt;code>{}&lt;/code> let&amp;rsquo;s compare the bytecode instructions they
compile into. Python has a built-in module called &lt;a
href="https://docs.python.org/3.12/library/dis.html"
>dis&lt;/a> which does exactly that.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="ln" id="hl-1-1">&lt;a class="lnlinks" href="#hl-1-1"> 1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="nn">dis&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-2">&lt;a class="lnlinks" href="#hl-1-2"> 2&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">a&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-3">&lt;a class="lnlinks" href="#hl-1-3"> 3&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">...&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">dict&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-4">&lt;a class="lnlinks" href="#hl-1-4"> 4&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-5">&lt;a class="lnlinks" href="#hl-1-5"> 5&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">b&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-6">&lt;a class="lnlinks" href="#hl-1-6"> 6&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">...&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-7">&lt;a class="lnlinks" href="#hl-1-7"> 7&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-8">&lt;a class="lnlinks" href="#hl-1-8"> 8&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">dis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-9">&lt;a class="lnlinks" href="#hl-1-9"> 9&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">1&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="n">RESUME&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-10">&lt;a class="lnlinks" href="#hl-1-10">10&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-11">&lt;a class="lnlinks" href="#hl-1-11">11&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">2&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="n">LOAD_GLOBAL&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">NULL&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nb">dict&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-12">&lt;a class="lnlinks" href="#hl-1-12">12&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">12&lt;/span> &lt;span class="n">CALL&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-13">&lt;a class="lnlinks" href="#hl-1-13">13&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">20&lt;/span> &lt;span class="n">RETURN_VALUE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-14">&lt;a class="lnlinks" href="#hl-1-14">14&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">dis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-15">&lt;a class="lnlinks" href="#hl-1-15">15&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">1&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="n">RESUME&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-16">&lt;a class="lnlinks" href="#hl-1-16">16&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-17">&lt;a class="lnlinks" href="#hl-1-17">17&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">2&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="n">BUILD_MAP&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-18">&lt;a class="lnlinks" href="#hl-1-18">18&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">4&lt;/span> &lt;span class="n">RETURN_VALUE&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Although they produce the same end result these two expression, quite clearly, execute different code.&lt;/p>
&lt;h3 id="bytecode-instructions" >
&lt;a href="#bytecode-instructions" aria-label="Anchor">#&lt;/a>
Bytecode instructions
&lt;/h3>
&lt;p>The output of &lt;code>dis.dis&lt;/code> isn&amp;rsquo;t very hard to understand.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="ln" id="hl-2-1">&lt;a class="lnlinks" href="#hl-2-1">1&lt;/a>&lt;/span>&lt;span class="cl"> (1) | (2) | (3) | (4) | (5)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-2-2">&lt;a class="lnlinks" href="#hl-2-2">2&lt;/a>&lt;/span>&lt;span class="cl">-----|-----------|-----------------------|-----|---------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-2-3">&lt;a class="lnlinks" href="#hl-2-3">3&lt;/a>&lt;/span>&lt;span class="cl"> 1 | 0 | RESUME | 0 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-2-4">&lt;a class="lnlinks" href="#hl-2-4">4&lt;/a>&lt;/span>&lt;span class="cl"> | | | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-2-5">&lt;a class="lnlinks" href="#hl-2-5">5&lt;/a>&lt;/span>&lt;span class="cl"> 2 | 2 | LOAD_GLOBAL | 1 | (NULL + dict)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-2-6">&lt;a class="lnlinks" href="#hl-2-6">6&lt;/a>&lt;/span>&lt;span class="cl"> | 12 | CALL | 0 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-2-7">&lt;a class="lnlinks" href="#hl-2-7">7&lt;/a>&lt;/span>&lt;span class="cl"> | 20 | RETURN_VALUE | |
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Each column has a purpose:&lt;/p>
&lt;ol>
&lt;li>Line number in the source code.&lt;/li>
&lt;li>The address of the instruction &amp;mdash; byte index in the compiled bytecode.&lt;/li>
&lt;li>The bytecode name (opcode).&lt;/li>
&lt;li>Operation parameters.&lt;/li>
&lt;li>Human-readable interpretation of the operation parameters.&lt;/li>
&lt;/ol>
&lt;p>Alright, equipped with this knowledge and by cross-referencing the &lt;a
href="https://docs.python.org/3.12/library/dis.html#python-bytecode-instructions"
>opcode set&lt;/a> we know that:&lt;/p>
&lt;ol>
&lt;li>&lt;a
href="https://docs.python.org/3.12/library/dis.html#opcode-RESUME"
>&lt;code>RESUME&lt;/code>&lt;/a> &amp;mdash; does nothing. It performs internal tracking, debugging and optimization checks.&lt;/li>
&lt;li>&lt;a
href="https://docs.python.org/3.12/library/dis.html#opcode-LOAD_GLOBAL"
>&lt;code>LOAD_GLOBAL&lt;/code>&lt;/a> &amp;mdash; loads a global variable onto the stack. From the human-readable interpretation of the opcode
parameters we know that it loads &lt;code>dict&lt;/code> (ignore &lt;code>NULL&lt;/code> for now).&lt;/li>
&lt;li>&lt;a
href="https://docs.python.org/3.12/library/dis.html#opcode-CALL"
>&lt;code>CALL&lt;/code>&lt;/a> &amp;mdash; calls a callable object with the number of arguments specified by &lt;code>argc&lt;/code> &amp;mdash; in our case it&amp;rsquo;s zero.&lt;/li>
&lt;li>&lt;a
href="https://docs.python.org/3.12/library/dis.html#opcode-RETURN_VALUE"
>&lt;code>RETURN_VALUE&lt;/code>&lt;/a> &amp;mdash; returns with the last element from the stack to the caller.&lt;/li>
&lt;/ol>
&lt;p>Compiling &lt;code>return {}&lt;/code> yields one more opcode:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ol start="5">
&lt;li>&lt;a
href="https://docs.python.org/3.12/library/dis.html#opcode-BUILD_MAP"
>&lt;code>BUILD_MAP&lt;/code>&lt;/a> &amp;mdash; pushes a new dictionary object onto the stack. Pops &lt;code>2 * count&lt;/code> items so that the dictionary holds
count entries.&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;p>Already we have a few obvious differences between the two cases. The &lt;code>{}&lt;/code> expression builds a dictionary directly, while
&lt;code>dict()&lt;/code> delegates that to a callable object. Before that can even happen it first needs to load the global value
(&lt;code>dict&lt;/code>) onto the stack &amp;mdash; it actually does that every single time we call that function.&lt;/p>
&lt;p>Why?&lt;/p>
&lt;p>Because &lt;code>dict&lt;/code> is not constant: it can be overwritten &amp;mdash; and therefore &amp;mdash; produce a different value.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="ln" id="hl-3-1">&lt;a class="lnlinks" href="#hl-3-1">1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">a&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-2">&lt;a class="lnlinks" href="#hl-3-2">2&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">...&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">dict&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-3">&lt;a class="lnlinks" href="#hl-3-3">3&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-4">&lt;a class="lnlinks" href="#hl-3-4">4&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">dict&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">lambda&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">42&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-5">&lt;a class="lnlinks" href="#hl-3-5">5&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-6">&lt;a class="lnlinks" href="#hl-3-6">6&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">assert&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">42&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It can happen. This is why Python needs to generate this overhead of loading and calling a callable for every call of
the function.&lt;/p>
&lt;p>OK, it all sound very neat. Calling a callable does create an overhead and it&amp;rsquo;s reasonable to assume that the difference
we saw at the beginning of this post is a result of this overhead. However, are we sure that &lt;code>dict()&lt;/code> internally calls
the same code, as &lt;code>{}&lt;/code> does? &lt;code>dict&lt;/code> is a class and, luckily, the &lt;a
href="https://docs.python.org/3/library/dis.html#dis.dis"
>&lt;code>dis.dis&lt;/code>&lt;/a> function can compile classes to bytecode.&lt;/p>
&lt;div class="alert alert-info">
&lt;h6 class="alert-heading">
&lt;i class="bi bi-pencil me-2" aria-hidden="true">&lt;/i>
Example
&lt;/h6>
&lt;p class="my-3">
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="ln" id="hl-0-1">&lt;a class="lnlinks" href="#hl-0-1"> 1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">dis&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-2">&lt;a class="lnlinks" href="#hl-0-2"> 2&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-3">&lt;a class="lnlinks" href="#hl-0-3"> 3&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Foo&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-4">&lt;a class="lnlinks" href="#hl-0-4"> 4&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">bar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-5">&lt;a class="lnlinks" href="#hl-0-5"> 5&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">42&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-6">&lt;a class="lnlinks" href="#hl-0-6"> 6&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-7">&lt;a class="lnlinks" href="#hl-0-7"> 7&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__str__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-8">&lt;a class="lnlinks" href="#hl-0-8"> 8&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="vm">__class__&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="vm">__name__&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-9">&lt;a class="lnlinks" href="#hl-0-9"> 9&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-10">&lt;a class="lnlinks" href="#hl-0-10">10&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="n">dis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Foo&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It prints out disassembly for all of the classes&amp;rsquo;s methods:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-txt" data-lang="txt">&lt;span class="line">&lt;span class="ln" id="hl-1-1">&lt;a class="lnlinks" href="#hl-1-1"> 1&lt;/a>&lt;/span>&lt;span class="cl">Disassembly of __str__:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-2">&lt;a class="lnlinks" href="#hl-1-2"> 2&lt;/a>&lt;/span>&lt;span class="cl"> 8 0 RESUME 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-3">&lt;a class="lnlinks" href="#hl-1-3"> 3&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-4">&lt;a class="lnlinks" href="#hl-1-4"> 4&lt;/a>&lt;/span>&lt;span class="cl"> 9 2 LOAD_FAST 0 (self)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-5">&lt;a class="lnlinks" href="#hl-1-5"> 5&lt;/a>&lt;/span>&lt;span class="cl"> 4 LOAD_ATTR 0 (__class__)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-6">&lt;a class="lnlinks" href="#hl-1-6"> 6&lt;/a>&lt;/span>&lt;span class="cl"> 24 LOAD_ATTR 2 (__name__)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-7">&lt;a class="lnlinks" href="#hl-1-7"> 7&lt;/a>&lt;/span>&lt;span class="cl"> 44 RETURN_VALUE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-8">&lt;a class="lnlinks" href="#hl-1-8"> 8&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-9">&lt;a class="lnlinks" href="#hl-1-9"> 9&lt;/a>&lt;/span>&lt;span class="cl">Disassembly of bar:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-10">&lt;a class="lnlinks" href="#hl-1-10">10&lt;/a>&lt;/span>&lt;span class="cl"> 5 0 RESUME 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-11">&lt;a class="lnlinks" href="#hl-1-11">11&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-12">&lt;a class="lnlinks" href="#hl-1-12">12&lt;/a>&lt;/span>&lt;span class="cl"> 6 2 RETURN_CONST 1 (42)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/p>
&lt;/div>
&lt;p>Let&amp;rsquo;s try this for &lt;code>dict&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="ln" id="hl-4-1">&lt;a class="lnlinks" href="#hl-4-1">1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">dis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">dict&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-4-2">&lt;a class="lnlinks" href="#hl-4-2">2&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip; it doesn&amp;rsquo;t print anything? Why?&lt;/p>
&lt;p>Well, the &lt;a
href="https://docs.python.org/3.12/library/dis.html"
>dis&lt;/a> module isn&amp;rsquo;t very useful for internal types and &lt;code>dict&lt;/code> is one of those types &amp;mdash; defined
within the interpreter&amp;rsquo;s source code.&lt;/p>
&lt;h3 id="getting-lost-in-the-cpython-source-code" >
&lt;a href="#getting-lost-in-the-cpython-source-code" aria-label="Anchor">#&lt;/a>
Getting lost in the CPython source code
&lt;/h3>
&lt;p>To tap into the forbidden magic, we need to clone the &lt;a
href="https://github.com/python/cpython/tree/main"
>CPython repository&lt;/a> first. We don&amp;rsquo;t need all the
history, so let&amp;rsquo;s &lt;a
href="https://git-scm.com/docs/git-clone#Documentation/git-clone.txt---depthltdepthgt"
>&lt;code>--depth 1&lt;/code>&lt;/a> this.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="ln" id="hl-5-1">&lt;a class="lnlinks" href="#hl-5-1">1&lt;/a>&lt;/span>&lt;span class="cl">git clone --depth &lt;span class="m">1&lt;/span> --branch v3.12.0 https://github.com/python/cpython.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-2">&lt;a class="lnlinks" href="#hl-5-2">2&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="c1"># or&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-3">&lt;a class="lnlinks" href="#hl-5-3">3&lt;/a>&lt;/span>&lt;span class="cl">git clone --depth &lt;span class="m">1&lt;/span> --branch v3.12.0 git@github.com:python/cpython.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we need to find what we&amp;rsquo;re actually looking for &amp;mdash; a place where opcode instructions are interpreted. After a cup
of coffee and a lot of greps later we find the &lt;a
href="https://github.com/python/cpython/blob/v3.12.0/Python/bytecodes.c"
>&lt;code>Python/bytecodes.c&lt;/code>&lt;/a> file. It consists of a single &lt;code>switch&lt;/code>
statement and it seems like all bytecode instruction are interpreted there.&lt;/p>
&lt;h4 id="the-dict-type" >
&lt;a href="#the-dict-type" aria-label="Anchor">#&lt;/a>
The &lt;code>dict&lt;/code> type
&lt;/h4>
&lt;p>Let&amp;rsquo;s tackle &lt;code>dict&lt;/code> first. All internal types are defined as &lt;code>PyTypeObject&lt;/code> objects and the &lt;code>dict&lt;/code> type is defined in
the &lt;a
href="https://github.com/python/cpython/blob/v3.12.0/Objects/dictobject.c#L3839"
>&lt;code>dictobject.c&lt;/code>&lt;/a> file. It has a lot of attributes defined, but only two are of interest
for us:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="ln" id="hl-6-1">&lt;a class="lnlinks" href="#hl-6-1"> 1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="n">PyTypeObject&lt;/span> &lt;span class="n">PyDict_Type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-6-2">&lt;a class="lnlinks" href="#hl-6-2"> 2&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="nf">PyVarObject_HEAD_INIT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">PyType_Type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-6-3">&lt;a class="lnlinks" href="#hl-6-3"> 3&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="s">&amp;#34;dict&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-6-4">&lt;a class="lnlinks" href="#hl-6-4"> 4&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PyDictObject&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-6-5">&lt;a class="lnlinks" href="#hl-6-5"> 5&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-6-6">&lt;a class="lnlinks" href="#hl-6-6"> 6&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">dict_init&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* tp_init */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-6-7">&lt;a class="lnlinks" href="#hl-6-7"> 7&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-6-8">&lt;a class="lnlinks" href="#hl-6-8"> 8&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">dict_new&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* tp_new */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-6-9">&lt;a class="lnlinks" href="#hl-6-9"> 9&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-6-10">&lt;a class="lnlinks" href="#hl-6-10">10&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The pair (&lt;code>dict_new&lt;/code> and &lt;code>dict_init&lt;/code>) will tell us what happens when someone creates a new dictionary.&lt;/p>
&lt;div class="alert alert-info">
&lt;h6 class="alert-heading">
&lt;i class="bi bi-pencil me-2" aria-hidden="true">&lt;/i>
Note
&lt;/h6>
&lt;p class="my-3">
&lt;p>The constructor in Python is called &lt;code>__new__&lt;/code>. It&amp;rsquo;s a static method that returns a new object of its type.&lt;/p>
&lt;p>The initializer method is called &lt;code>__init__&lt;/code>. It takes a newly created object and initializes its attributes. The
&lt;code>__init__&lt;/code>method is called after the &lt;code>__new__&lt;/code> method.&lt;/p>
&lt;/p>
&lt;/div>
&lt;p>The &lt;code>dict_new&lt;/code> function is defined here: &lt;a
href="https://github.com/python/cpython/blob/v3.12.0/Objects/dictobject.c#L3751"
>dictobject.c#L3751&lt;/a>.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="ln" id="hl-7-1">&lt;a class="lnlinks" href="#hl-7-1"> 1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-2">&lt;a class="lnlinks" href="#hl-7-2"> 2&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="nf">dict_new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PyTypeObject&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PyObject&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">kwds&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-3">&lt;a class="lnlinks" href="#hl-7-3"> 3&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-4">&lt;a class="lnlinks" href="#hl-7-4"> 4&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="nf">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">type&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-5">&lt;a class="lnlinks" href="#hl-7-5"> 5&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="nf">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">tp_alloc&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-6">&lt;a class="lnlinks" href="#hl-7-6"> 6&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="c1">// dict subclasses must implement the GC protocol
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-7">&lt;a class="lnlinks" href="#hl-7-7"> 7&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">_PyType_IS_GC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-8">&lt;a class="lnlinks" href="#hl-7-8"> 8&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-9">&lt;a class="lnlinks" href="#hl-7-9"> 9&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">self&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="nf">tp_alloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-10">&lt;a class="lnlinks" href="#hl-7-10">10&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">self&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-11">&lt;a class="lnlinks" href="#hl-7-11">11&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-12">&lt;a class="lnlinks" href="#hl-7-12">12&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-13">&lt;a class="lnlinks" href="#hl-7-13">13&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">PyDictObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">PyDictObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">self&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-14">&lt;a class="lnlinks" href="#hl-7-14">14&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line hl">&lt;span class="ln" id="hl-7-15">&lt;a class="lnlinks" href="#hl-7-15">15&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">d&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ma_used&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-16">&lt;a class="lnlinks" href="#hl-7-16">16&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">d&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ma_version_tag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">DICT_NEXT_VERSION&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-17">&lt;a class="lnlinks" href="#hl-7-17">17&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="nf">_PyInterpreterState_GET&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-18">&lt;a class="lnlinks" href="#hl-7-18">18&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="nf">dictkeys_incref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Py_EMPTY_KEYS&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line hl">&lt;span class="ln" id="hl-7-19">&lt;a class="lnlinks" href="#hl-7-19">19&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">d&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ma_keys&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Py_EMPTY_KEYS&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line hl">&lt;span class="ln" id="hl-7-20">&lt;a class="lnlinks" href="#hl-7-20">20&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">d&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ma_values&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-21">&lt;a class="lnlinks" href="#hl-7-21">21&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="nf">ASSERT_CONSISTENT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-22">&lt;a class="lnlinks" href="#hl-7-22">22&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-23">&lt;a class="lnlinks" href="#hl-7-23">23&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-24">&lt;a class="lnlinks" href="#hl-7-24">24&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-25">&lt;a class="lnlinks" href="#hl-7-25">25&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">self&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-26">&lt;a class="lnlinks" href="#hl-7-26">26&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;p>We see that first, it allocates a new object via the provided allocator (9&lt;sup>th&lt;/sup> line) and then sets
some of its internal fields (15&lt;sup>th&lt;/sup>, 19&lt;sup>th&lt;/sup>, and 20&lt;sup>th&lt;/sup>).
Interestingly for us, it &lt;strong>does not&lt;/strong> pre-allocate the dictionary&amp;rsquo;s internal memory (see marked lines). It might seems
strange at first, but please remember: an object&amp;rsquo;s initialization &amp;mdash; like memory pre-allocation &amp;mdash; is not a
responsibility of the &lt;code>__new__&lt;/code> method, that what the &lt;code>__init__&lt;/code> method is for.&lt;/p>
&lt;p>With the new object in memory, the &lt;code>dict_init&lt;/code> function can insert entries to it. The insertion logic is delegated to
the &lt;code>dict_update_common&lt;/code> function, which can be found here: &lt;a
href="https://github.com/python/cpython/blob/v3.12.0/Objects/dictobject.c#L2678"
>dictobject.c#L2678&lt;/a>.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="ln" id="hl-8-1">&lt;a class="lnlinks" href="#hl-8-1"> 1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-8-2">&lt;a class="lnlinks" href="#hl-8-2"> 2&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="nf">dict_update_common&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">kwds&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-8-3">&lt;a class="lnlinks" href="#hl-8-3"> 3&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">methname&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-8-4">&lt;a class="lnlinks" href="#hl-8-4"> 4&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-8-5">&lt;a class="lnlinks" href="#hl-8-5"> 5&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">arg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-8-6">&lt;a class="lnlinks" href="#hl-8-6"> 6&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-8-7">&lt;a class="lnlinks" href="#hl-8-7"> 7&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-8-8">&lt;a class="lnlinks" href="#hl-8-8"> 8&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nf">PyArg_UnpackTuple&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">methname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-8-9">&lt;a class="lnlinks" href="#hl-8-9"> 9&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-8-10">&lt;a class="lnlinks" href="#hl-8-10">10&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-8-11">&lt;a class="lnlinks" href="#hl-8-11">11&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">arg&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line hl">&lt;span class="ln" id="hl-8-12">&lt;a class="lnlinks" href="#hl-8-12">12&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">dict_update_arg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-8-13">&lt;a class="lnlinks" href="#hl-8-13">13&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-8-14">&lt;a class="lnlinks" href="#hl-8-14">14&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-8-15">&lt;a class="lnlinks" href="#hl-8-15">15&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">kwds&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-8-16">&lt;a class="lnlinks" href="#hl-8-16">16&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">PyArg_ValidateKeywordArguments&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">kwds&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line hl">&lt;span class="ln" id="hl-8-17">&lt;a class="lnlinks" href="#hl-8-17">17&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">PyDict_Merge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">kwds&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-8-18">&lt;a class="lnlinks" href="#hl-8-18">18&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-8-19">&lt;a class="lnlinks" href="#hl-8-19">19&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-8-20">&lt;a class="lnlinks" href="#hl-8-20">20&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-8-21">&lt;a class="lnlinks" href="#hl-8-21">21&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-8-22">&lt;a class="lnlinks" href="#hl-8-22">22&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;p>It updates the dictionary from both args and kwargs.&lt;/p>
&lt;h5 id="args--dict_update_arg" >
&lt;a href="#args--dict_update_arg" aria-label="Anchor">#&lt;/a>
args &amp;amp; &lt;code>dict_update_arg&lt;/code>
&lt;/h5>
&lt;p>For &lt;code>args&lt;/code> it calls the &lt;code>dict_update_arg&lt;/code> function.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="ln" id="hl-9-1">&lt;a class="lnlinks" href="#hl-9-1"> 1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-9-2">&lt;a class="lnlinks" href="#hl-9-2"> 2&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="nf">dict_update_arg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-9-3">&lt;a class="lnlinks" href="#hl-9-3"> 3&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-9-4">&lt;a class="lnlinks" href="#hl-9-4"> 4&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">PyDict_CheckExact&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-9-5">&lt;a class="lnlinks" href="#hl-9-5"> 5&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">PyDict_Merge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-9-6">&lt;a class="lnlinks" href="#hl-9-6"> 6&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-9-7">&lt;a class="lnlinks" href="#hl-9-7"> 7&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-9-8">&lt;a class="lnlinks" href="#hl-9-8"> 8&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">_PyObject_LookupAttr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nf">_Py_ID&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-9-9">&lt;a class="lnlinks" href="#hl-9-9"> 9&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-9-10">&lt;a class="lnlinks" href="#hl-9-10">10&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-9-11">&lt;a class="lnlinks" href="#hl-9-11">11&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">func&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-9-12">&lt;a class="lnlinks" href="#hl-9-12">12&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="nf">Py_DECREF&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-9-13">&lt;a class="lnlinks" href="#hl-9-13">13&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">PyDict_Merge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-9-14">&lt;a class="lnlinks" href="#hl-9-14">14&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-9-15">&lt;a class="lnlinks" href="#hl-9-15">15&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">PyDict_MergeFromSeq2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-9-16">&lt;a class="lnlinks" href="#hl-9-16">16&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The function checks if &lt;code>arg&lt;/code> is a dictionary, if so it merges the two (&lt;a
href="https://github.com/python/cpython/blob/v3.12.0/Objects/dictobject.c#L2988"
>&lt;code>PyDict_Merge&lt;/code>&lt;/a>), otherwise it adds new entries
from a sequence of pairs (&lt;a
href="https://github.com/python/cpython/blob/v3.12.0/Objects/dictobject.c#L2722"
>&lt;code>PyDict_MergeFromSeq2&lt;/code>&lt;/a>).&lt;/p>
&lt;h5 id="kwargs--pydict_merge" >
&lt;a href="#kwargs--pydict_merge" aria-label="Anchor">#&lt;/a>
kwargs &amp;amp; &lt;code>PyDict_Merge&lt;/code>
&lt;/h5>
&lt;p>The &lt;code>kwargs&lt;/code> path ends in the same place &amp;mdash; &lt;a
href="https://github.com/python/cpython/blob/v3.12.0/Objects/dictobject.c#L2988"
>&lt;code>PyDict_Merge&lt;/code>&lt;/a>. Let&amp;rsquo;s take a look.&lt;/p>
&lt;p>Internally, it delegates all logic to the &lt;a
href="https://github.com/python/cpython/blob/v3.12.0/Objects/dictobject.c#L2807"
>&lt;code>dict_merge&lt;/code>&lt;/a> function.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="ln" id="hl-10-1">&lt;a class="lnlinks" href="#hl-10-1"> 1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-2">&lt;a class="lnlinks" href="#hl-10-2"> 2&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="nf">dict_merge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PyInterpreterState&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">interp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">override&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-3">&lt;a class="lnlinks" href="#hl-10-3"> 3&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-4">&lt;a class="lnlinks" href="#hl-10-4"> 4&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">PyDictObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">mp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-5">&lt;a class="lnlinks" href="#hl-10-5"> 5&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-6">&lt;a class="lnlinks" href="#hl-10-6"> 6&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="nf">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">override&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">override&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-7">&lt;a class="lnlinks" href="#hl-10-7"> 7&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-8">&lt;a class="lnlinks" href="#hl-10-8"> 8&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="cm">/* We accept for the argument either a concrete dictionary object,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-9">&lt;a class="lnlinks" href="#hl-10-9"> 9&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="cm"> * or an abstract &amp;#34;mapping&amp;#34; object. For the former, we can do
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-10">&lt;a class="lnlinks" href="#hl-10-10">10&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="cm"> * things quite efficiently. For the latter, we only require that
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-11">&lt;a class="lnlinks" href="#hl-10-11">11&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="cm"> * PyMapping_Keys() and PyObject_GetItem() be supported.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-12">&lt;a class="lnlinks" href="#hl-10-12">12&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-13">&lt;a class="lnlinks" href="#hl-10-13">13&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nf">PyDict_Check&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-14">&lt;a class="lnlinks" href="#hl-10-14">14&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="nf">PyErr_BadInternalCall&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-15">&lt;a class="lnlinks" href="#hl-10-15">15&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-16">&lt;a class="lnlinks" href="#hl-10-16">16&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-17">&lt;a class="lnlinks" href="#hl-10-17">17&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">mp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">PyDictObject&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-18">&lt;a class="lnlinks" href="#hl-10-18">18&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">PyDict_Check&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">Py_TYPE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">tp_iter&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">getiterfunc&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">dict_iter&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-19">&lt;a class="lnlinks" href="#hl-10-19">19&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-20">&lt;a class="lnlinks" href="#hl-10-20">20&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-21">&lt;a class="lnlinks" href="#hl-10-21">21&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-22">&lt;a class="lnlinks" href="#hl-10-22">22&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="cm">/* Do it the generic, slower way */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-23">&lt;a class="lnlinks" href="#hl-10-23">23&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-24">&lt;a class="lnlinks" href="#hl-10-24">24&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-25">&lt;a class="lnlinks" href="#hl-10-25">25&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-26">&lt;a class="lnlinks" href="#hl-10-26">26&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="nf">ASSERT_CONSISTENT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-27">&lt;a class="lnlinks" href="#hl-10-27">27&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-10-28">&lt;a class="lnlinks" href="#hl-10-28">28&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From the comment, we know that the function has been optimized for being called with another dictionary as a parameter.
If the parameter is not a dictionary, then it&amp;rsquo;s a generic &lt;a
href="https://docs.python.org/3.12/library/collections.abc.html#collections.abc.Mapping"
>&lt;code>Mapping&lt;/code>&lt;/a> &amp;mdash; a container object that supports arbitrary key
lookups.&lt;/p>
&lt;h4 id="the--expression" >
&lt;a href="#the--expression" aria-label="Anchor">#&lt;/a>
The &lt;code>{}&lt;/code> expression
&lt;/h4>
&lt;p>The literal expression should be easier to reason about. Let&amp;rsquo;s go back to the &lt;a
href="https://github.com/python/cpython/blob/v3.12.0/Python/bytecodes.c"
>bytecode.c&lt;/a> file and find mapping for the
&lt;code>BUILD_MAP&lt;/code> opcode.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="ln" id="hl-11-1">&lt;a class="lnlinks" href="#hl-11-1"> 1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="nf">inst&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BUILD_MAP&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">oparg&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">--&lt;/span> &lt;span class="n">map&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-11-2">&lt;a class="lnlinks" href="#hl-11-2"> 2&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">map&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">_PyDict_FromItems&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-11-3">&lt;a class="lnlinks" href="#hl-11-3"> 3&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">values&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-11-4">&lt;a class="lnlinks" href="#hl-11-4"> 4&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">values&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-11-5">&lt;a class="lnlinks" href="#hl-11-5"> 5&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">oparg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-11-6">&lt;a class="lnlinks" href="#hl-11-6"> 6&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">map&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-11-7">&lt;a class="lnlinks" href="#hl-11-7"> 7&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">goto&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-11-8">&lt;a class="lnlinks" href="#hl-11-8"> 8&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-11-9">&lt;a class="lnlinks" href="#hl-11-9"> 9&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="nf">DECREF_INPUTS&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-11-10">&lt;a class="lnlinks" href="#hl-11-10">10&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="nf">ERROR_IF&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">map&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-11-11">&lt;a class="lnlinks" href="#hl-11-11">11&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>See sources here: &lt;a
href="https://github.com/python/cpython/blob/v3.12.0/Python/bytecodes.c#L1541"
>bytecode.c#L1541&lt;/a>.&lt;/em>&lt;/p>
&lt;p>We see that the dictionary is fully constructed and returned by &lt;a
href="https://github.com/python/cpython/blob/v3.12.0/Objects/dictobject.c#L1616"
>&lt;code>_PyDict_FromItems&lt;/code>&lt;/a>. Let&amp;rsquo;s go there.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="ln" id="hl-12-1">&lt;a class="lnlinks" href="#hl-12-1"> 1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-2">&lt;a class="lnlinks" href="#hl-12-2"> 2&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="nf">_PyDict_FromItems&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Py_ssize_t&lt;/span> &lt;span class="n">keys_offset&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-3">&lt;a class="lnlinks" href="#hl-12-3"> 3&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Py_ssize_t&lt;/span> &lt;span class="n">values_offset&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-4">&lt;a class="lnlinks" href="#hl-12-4"> 4&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">Py_ssize_t&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-5">&lt;a class="lnlinks" href="#hl-12-5"> 5&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-6">&lt;a class="lnlinks" href="#hl-12-6"> 6&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">unicode&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-7">&lt;a class="lnlinks" href="#hl-12-7"> 7&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">keys&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-8">&lt;a class="lnlinks" href="#hl-12-8"> 8&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">PyInterpreterState&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">interp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">_PyInterpreterState_GET&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-9">&lt;a class="lnlinks" href="#hl-12-9"> 9&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-10">&lt;a class="lnlinks" href="#hl-12-10">10&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Py_ssize_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-11">&lt;a class="lnlinks" href="#hl-12-11">11&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nf">PyUnicode_CheckExact&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">ks&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-12">&lt;a class="lnlinks" href="#hl-12-12">12&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">unicode&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-13">&lt;a class="lnlinks" href="#hl-12-13">13&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-14">&lt;a class="lnlinks" href="#hl-12-14">14&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-15">&lt;a class="lnlinks" href="#hl-12-15">15&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">ks&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">keys_offset&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-16">&lt;a class="lnlinks" href="#hl-12-16">16&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-17">&lt;a class="lnlinks" href="#hl-12-17">17&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line hl">&lt;span class="ln" id="hl-12-18">&lt;a class="lnlinks" href="#hl-12-18">18&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dict&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">dict_new_presized&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">interp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">unicode&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-19">&lt;a class="lnlinks" href="#hl-12-19">19&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">dict&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-20">&lt;a class="lnlinks" href="#hl-12-20">20&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-21">&lt;a class="lnlinks" href="#hl-12-21">21&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-22">&lt;a class="lnlinks" href="#hl-12-22">22&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-23">&lt;a class="lnlinks" href="#hl-12-23">23&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">ks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">keys&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-24">&lt;a class="lnlinks" href="#hl-12-24">24&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">vs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">values&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-25">&lt;a class="lnlinks" href="#hl-12-25">25&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-26">&lt;a class="lnlinks" href="#hl-12-26">26&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Py_ssize_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-27">&lt;a class="lnlinks" href="#hl-12-27">27&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ks&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-28">&lt;a class="lnlinks" href="#hl-12-28">28&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">vs&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-29">&lt;a class="lnlinks" href="#hl-12-29">29&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">PyDict_SetItem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dict&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-30">&lt;a class="lnlinks" href="#hl-12-30">30&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="nf">Py_DECREF&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dict&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-31">&lt;a class="lnlinks" href="#hl-12-31">31&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-32">&lt;a class="lnlinks" href="#hl-12-32">32&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-33">&lt;a class="lnlinks" href="#hl-12-33">33&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">ks&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">keys_offset&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-34">&lt;a class="lnlinks" href="#hl-12-34">34&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">vs&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">values_offset&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-35">&lt;a class="lnlinks" href="#hl-12-35">35&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-36">&lt;a class="lnlinks" href="#hl-12-36">36&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-37">&lt;a class="lnlinks" href="#hl-12-37">37&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">dict&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-12-38">&lt;a class="lnlinks" href="#hl-12-38">38&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;p>I&amp;rsquo;ve marked the most interesting line: in opposition to &lt;code>dict_new&lt;/code>, it &lt;strong>pre-allocates&lt;/strong> the dictionary, so it already
has a capacity for all of its entries. After that it inserts key-value pairs one-by-one.&lt;/p>
&lt;h2 id="conclusions" >
&lt;a href="#conclusions" aria-label="Anchor">#&lt;/a>
Conclusions
&lt;/h2>
&lt;p>To sum things up.&lt;/p>
&lt;p>When you do &lt;code>dict(a=1, b=2)&lt;/code>, Python needs to:&lt;/p>
&lt;ul>
&lt;li>allocate a new &lt;code>PyObject&lt;/code>,&lt;/li>
&lt;li>construct a &lt;code>dict&lt;/code> via the &lt;code>__new__&lt;/code> method,&lt;/li>
&lt;li>call its &lt;code>__init__&lt;/code> method, which internally calls &lt;a
href="https://github.com/python/cpython/blob/v3.12.0/Objects/dictobject.c#L2988"
>&lt;code>PyDict_Merge&lt;/code>&lt;/a>,&lt;/li>
&lt;li>because &lt;code>kwargs&lt;/code> is not &lt;code>dict&lt;/code>, &lt;a
href="https://github.com/python/cpython/blob/v3.12.0/Objects/dictobject.c#L2988"
>&lt;code>PyDict_Merge&lt;/code>&lt;/a> needs to use the slower method, which inserts entries one-by-one.&lt;/li>
&lt;/ul>
&lt;p>Whereas doing &lt;code>{}&lt;/code> causes Python to:&lt;/p>
&lt;ul>
&lt;li>construct a new &lt;strong>pre-allocated&lt;/strong> dictionary,&lt;/li>
&lt;li>insert entries one-by-one.&lt;/li>
&lt;/ul>
&lt;p>To be fair, unless you construct dictionaries in a loop, I don&amp;rsquo;t believe there&amp;rsquo;s a lot to gain performance-wise by
switching from &lt;code>dict&lt;/code> to &lt;code>{}&lt;/code>. There&amp;rsquo;s one thing I&amp;rsquo;d like you to remember after reading this post:&lt;/p>
&lt;div class="alert alert-info">
&lt;h6 class="alert-heading">
&lt;i class="bi bi-clipboard2-fill me-2" aria-hidden="true">&lt;/i>
tl;dr
&lt;/h6>
&lt;p class="my-3">
The &lt;code>{}&lt;/code> is always faster than &lt;code>dict&lt;/code>.
&lt;/p>
&lt;/div>
&lt;h2 id="appendix" >
&lt;a href="#appendix" aria-label="Anchor">#&lt;/a>
Appendix
&lt;/h2>
&lt;p>Similar analysis can be done for lists, sets, and (&lt;em>possibly&lt;/em>) tuples. However, this post is already too long, so I&amp;rsquo;ll
drop all the other resources I&amp;rsquo;ve gathered here.&lt;/p>
&lt;h3 id="lists" >
&lt;a href="#lists" aria-label="Anchor">#&lt;/a>
Lists
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="ln" id="hl-13-1">&lt;a class="lnlinks" href="#hl-13-1">1&lt;/a>&lt;/span>&lt;span class="cl">$ python -m timeit &lt;span class="s2">&amp;#34;list((1, 2, &amp;#39;a&amp;#39;))&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-13-2">&lt;a class="lnlinks" href="#hl-13-2">2&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="m">5000000&lt;/span> loops, best of 5: 53.4 nsec per loop
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-13-3">&lt;a class="lnlinks" href="#hl-13-3">3&lt;/a>&lt;/span>&lt;span class="cl">$ python -m timeit &lt;span class="s2">&amp;#34;[1, 2, &amp;#39;a&amp;#39;]&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-13-4">&lt;a class="lnlinks" href="#hl-13-4">4&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="m">10000000&lt;/span> loops, best of 5: 29.7 nsec per loop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="list-type" >
&lt;a href="#list-type" aria-label="Anchor">#&lt;/a>
&lt;code>list&lt;/code> type
&lt;/h4>
&lt;p>The Python&amp;rsquo;s &lt;code>list&lt;/code> type is defined in the &lt;code>listobject.c&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="ln" id="hl-14-1">&lt;a class="lnlinks" href="#hl-14-1">1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="n">PyTypeObject&lt;/span> &lt;span class="n">PyList_Type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-14-2">&lt;a class="lnlinks" href="#hl-14-2">2&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-14-3">&lt;a class="lnlinks" href="#hl-14-3">3&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">initproc&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">list___init__&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* tp_init */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-14-4">&lt;a class="lnlinks" href="#hl-14-4">4&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">PyType_GenericAlloc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* tp_alloc */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-14-5">&lt;a class="lnlinks" href="#hl-14-5">5&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">PyType_GenericNew&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* tp_new */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-14-6">&lt;a class="lnlinks" href="#hl-14-6">6&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-14-7">&lt;a class="lnlinks" href="#hl-14-7">7&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>PyType_GenericNew&lt;/code> does nothing &amp;mdash; it ignores &lt;code>args&lt;/code> and &lt;code>kwargs&lt;/code>, and return an object allocated by
&lt;code>type-&amp;gt;typ_alloc&lt;/code>. Source: &lt;a
href="https://github.com/python/cpython/blob/main/Objects/typeobject.c#L1768"
class="hide-external"
>https://github.com/python/cpython/blob/main/Objects/typeobject.c#L1768&lt;/a>&lt;/p>
&lt;p>&lt;code>PyType_GenericAlloc&lt;/code> allocated a new object and (if it&amp;rsquo;s garbage-collectable) marks it as &amp;ldquo;to-be-collected&amp;rdquo;.&lt;/p>
&lt;p>&lt;code>list___init__&lt;/code> is a convenience wrapper around the &lt;code>list___init___impl&lt;/code> function, which does the actual initialization.
It does some basic pre-steps:&lt;/p>
&lt;ul>
&lt;li>fails if any &lt;code>kwarg&lt;/code> has been passed,&lt;/li>
&lt;li>fails if &lt;code>args&lt;/code> has more than 1 element,&lt;/li>
&lt;li>converts the first argument of &lt;code>args&lt;/code> to an iterable.&lt;/li>
&lt;/ul>
&lt;p>&lt;code>list___init___impl&lt;/code> clears the list (if not empty) and extends it by the provided iterable (by calling the
&lt;code>list_extend&lt;/code> function).&lt;/p>
&lt;div class="alert alert-warning">
&lt;h6 class="alert-heading">
&lt;i class="bi bi-question-circle me-2" aria-hidden="true">&lt;/i>
Question
&lt;/h6>
&lt;p class="my-3">
&lt;p>I think the two:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="ln" id="hl-0-1">&lt;a class="lnlinks" href="#hl-0-1">1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="nb">list&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-2">&lt;a class="lnlinks" href="#hl-0-2">2&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-3">&lt;a class="lnlinks" href="#hl-0-3">3&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="n">_tmp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-4">&lt;a class="lnlinks" href="#hl-0-4">4&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="n">_tmp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">extend&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>are equivalent in every way (but the generated opcodes sequence) and are calling the same underlying C code.&lt;/p>
&lt;/p>
&lt;/div>
&lt;h4 id="-literal-expression" >
&lt;a href="#-literal-expression" aria-label="Anchor">#&lt;/a>
&lt;code>[]&lt;/code> literal expression
&lt;/h4>
&lt;p>Opcode &lt;code>BUILD_LIST&lt;/code> uses the &lt;code>_PyList_FromArraySteal&lt;/code> function to construct a list object and return it.&lt;/p>
&lt;div class="alert alert-info">
&lt;h6 class="alert-heading">
&lt;i class="bi bi-pencil me-2" aria-hidden="true">&lt;/i>
Note
&lt;/h6>
&lt;p class="my-3">
&lt;p>_PyList_FromArraySteal is used since 3.12. See &lt;a
href="https://docs.python.org/3.12/whatsnew/changelog.html"
>3.12 changelog&lt;/a>
and &lt;a
href="https://github.com/python/cpython/pull/100147"
>gh-100146&lt;/a>. Before 3.12, the opcode was repeatedly calling &lt;code>POP()&lt;/code>
to get items from the stack, and then inserting them into the list.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="ln" id="hl-0-1">&lt;a class="lnlinks" href="#hl-0-1">1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="n">oparg&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-2">&lt;a class="lnlinks" href="#hl-0-2">2&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">item&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">POP&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-3">&lt;a class="lnlinks" href="#hl-0-3">3&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="nf">PyList_SET_ITEM&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">oparg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-4">&lt;a class="lnlinks" href="#hl-0-4">4&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>See &lt;a
href="https://github.com/python/cpython/pull/100147/files#diff-729a985b0cb8b431cb291f1edb561bbbfea22e3f8c262451cd83328a0936a342L1447-L1450"
>change in gh-100146 PR&lt;/a>.&lt;/p>
&lt;/p>
&lt;/div>
&lt;p>The &lt;code>_PyList_FromArraySteal&lt;/code> helper creates an empty list (if there are no items), or preallocates the list before
inserting items to it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="ln" id="hl-15-1">&lt;a class="lnlinks" href="#hl-15-1">1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="n">PyObject&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">dst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ob_item&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-15-2">&lt;a class="lnlinks" href="#hl-15-2">2&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="nf">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dst&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="sets" >
&lt;a href="#sets" aria-label="Anchor">#&lt;/a>
Sets
&lt;/h3>
&lt;div class="alert alert-warning">
&lt;h6 class="alert-heading">
&lt;i class="bi bi-exclamation-triangle me-2" aria-hidden="true">&lt;/i>
Warning
&lt;/h6>
&lt;p class="my-3">
AFAIK there&amp;rsquo;s no way to construct a new set with a literal expression, hence the following analysis is performed for
sets with two elements: &lt;code>1&lt;/code> and &lt;code>2&lt;/code>.
&lt;/p>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="ln" id="hl-16-1">&lt;a class="lnlinks" href="#hl-16-1">1&lt;/a>&lt;/span>&lt;span class="cl">$ python -m timeit &lt;span class="s2">&amp;#34;set((1, 2))&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-16-2">&lt;a class="lnlinks" href="#hl-16-2">2&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="m">5000000&lt;/span> loops, best of 5: 82.6 nsec per loop
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-16-3">&lt;a class="lnlinks" href="#hl-16-3">3&lt;/a>&lt;/span>&lt;span class="cl">$ python -m timeit &lt;span class="s2">&amp;#34;{1, 2}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-16-4">&lt;a class="lnlinks" href="#hl-16-4">4&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="m">5000000&lt;/span> loops, best of 5: 45.5 nsec per loop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="set-type" >
&lt;a href="#set-type" aria-label="Anchor">#&lt;/a>
&lt;code>set&lt;/code> type
&lt;/h4>
&lt;p>The Python&amp;rsquo;s &lt;code>set&lt;/code> type is defined in the &lt;code>setobject.c&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="ln" id="hl-17-1">&lt;a class="lnlinks" href="#hl-17-1">1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="n">PyTypeObject&lt;/span> &lt;span class="n">PySet_Type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-17-2">&lt;a class="lnlinks" href="#hl-17-2">2&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-17-3">&lt;a class="lnlinks" href="#hl-17-3">3&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">initproc&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">set_init&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* tp_init */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-17-4">&lt;a class="lnlinks" href="#hl-17-4">4&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">PyType_GenericAlloc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* tp_alloc */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-17-5">&lt;a class="lnlinks" href="#hl-17-5">5&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">set_new&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* tp_new */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-17-6">&lt;a class="lnlinks" href="#hl-17-6">6&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-17-7">&lt;a class="lnlinks" href="#hl-17-7">7&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>set_new&lt;/code> uses the allocated to create a new empty set object. Internally it calls the &lt;code>make_new_set&lt;/code> function.&lt;/p>
&lt;p>&lt;code>set_init&lt;/code> performs some pre-steps:&lt;/p>
&lt;ul>
&lt;li>fails if any &lt;code>kwarg&lt;/code> has been passed,&lt;/li>
&lt;li>fails if &lt;code>args&lt;/code> has more then 1 element,&lt;/li>
&lt;li>converts the first argument of &lt;code>args&lt;/code> to an iterable,&lt;/li>
&lt;li>if the set object has already been filled, then it clears it&lt;/li>
&lt;/ul>
&lt;p>&amp;hellip; and calls the &lt;code>set_update_internal&lt;/code> function, to insert values into the set object.&lt;/p>
&lt;h4 id="1-2-literal-expression" >
&lt;a href="#1-2-literal-expression" aria-label="Anchor">#&lt;/a>
&lt;code>{1, 2}&lt;/code> literal expression
&lt;/h4>
&lt;p>The opcode handler has no dedicated helpers. It constructs a new set (empty), and then iterates over all items from the
stack and insets them one-by-one.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="ln" id="hl-18-1">&lt;a class="lnlinks" href="#hl-18-1"> 1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="nf">inst&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BUILD_SET&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">oparg&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">--&lt;/span> &lt;span class="n">set&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-18-2">&lt;a class="lnlinks" href="#hl-18-2"> 2&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">set&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">PySet_New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-18-3">&lt;a class="lnlinks" href="#hl-18-3"> 3&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">set&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-18-4">&lt;a class="lnlinks" href="#hl-18-4"> 4&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="nf">GOTO_ERROR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-18-5">&lt;a class="lnlinks" href="#hl-18-5"> 5&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">err&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-18-6">&lt;a class="lnlinks" href="#hl-18-6"> 6&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">oparg&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-18-7">&lt;a class="lnlinks" href="#hl-18-7"> 7&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">item&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">values&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-18-8">&lt;a class="lnlinks" href="#hl-18-8"> 8&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">err&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-18-9">&lt;a class="lnlinks" href="#hl-18-9"> 9&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">err&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">PySet_Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">set&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-18-10">&lt;a class="lnlinks" href="#hl-18-10">10&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="nf">Py_DECREF&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-18-11">&lt;a class="lnlinks" href="#hl-18-11">11&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-18-12">&lt;a class="lnlinks" href="#hl-18-12">12&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-18-13">&lt;a class="lnlinks" href="#hl-18-13">13&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="nf">Py_DECREF&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">set&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-18-14">&lt;a class="lnlinks" href="#hl-18-14">14&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="nf">ERROR_IF&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-18-15">&lt;a class="lnlinks" href="#hl-18-15">15&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-18-16">&lt;a class="lnlinks" href="#hl-18-16">16&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Source: &lt;a
href="https://github.com/python/cpython/blob/main/Python/bytecodes.c#L1627"
class="hide-external"
>https://github.com/python/cpython/blob/main/Python/bytecodes.c#L1627&lt;/a>.&lt;/p>
&lt;div class="alert alert-warning">
&lt;h6 class="alert-heading">
&lt;i class="bi bi-exclamation-triangle me-2" aria-hidden="true">&lt;/i>
Warning
&lt;/h6>
&lt;p class="my-3">
&lt;p>Warning
The generated bytecode is different if we add another argument to the literal expression: &lt;code>{1, 2, 3}&lt;/code>. Then it becomes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="ln" id="hl-0-1">&lt;a class="lnlinks" href="#hl-0-1">1&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">2&lt;/span> &lt;span class="n">BUILD_SET&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-2">&lt;a class="lnlinks" href="#hl-0-2">2&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">4&lt;/span> &lt;span class="n">LOAD_CONST&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">frozenset&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">}))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-3">&lt;a class="lnlinks" href="#hl-0-3">3&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">6&lt;/span> &lt;span class="n">SET_UPDATE&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-4">&lt;a class="lnlinks" href="#hl-0-4">4&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">8&lt;/span> &lt;span class="n">RETURN_VALUE&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/p>
&lt;/div>
&lt;h3 id="tuples" >
&lt;a href="#tuples" aria-label="Anchor">#&lt;/a>
Tuples
&lt;/h3>
&lt;p>This one&amp;rsquo;s tricky. Constructing a tuple with the &lt;code>tuple&lt;/code> type requires an iterable. The easiest way of getting one it to
create a tuple literal, which is obviously less efficient, than using a tuple literal syntax in the first place.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="ln" id="hl-19-1">&lt;a class="lnlinks" href="#hl-19-1"> 1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-2">&lt;a class="lnlinks" href="#hl-19-2"> 2&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">version_info&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-3">&lt;a class="lnlinks" href="#hl-19-3"> 3&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">version_info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">major&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">minor&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">micro&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">releaselevel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;final&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">serial&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-4">&lt;a class="lnlinks" href="#hl-19-4"> 4&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-5">&lt;a class="lnlinks" href="#hl-19-5"> 5&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">a&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-6">&lt;a class="lnlinks" href="#hl-19-6"> 6&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">...&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">tuple&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[]))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-7">&lt;a class="lnlinks" href="#hl-19-7"> 7&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-8">&lt;a class="lnlinks" href="#hl-19-8"> 8&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">b&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-9">&lt;a class="lnlinks" href="#hl-19-9"> 9&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">...&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-10">&lt;a class="lnlinks" href="#hl-19-10">10&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-11">&lt;a class="lnlinks" href="#hl-19-11">11&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="nn">dis&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-12">&lt;a class="lnlinks" href="#hl-19-12">12&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-13">&lt;a class="lnlinks" href="#hl-19-13">13&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">dis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-14">&lt;a class="lnlinks" href="#hl-19-14">14&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">1&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="n">RESUME&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-15">&lt;a class="lnlinks" href="#hl-19-15">15&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-16">&lt;a class="lnlinks" href="#hl-19-16">16&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">2&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="n">LOAD_GLOBAL&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">NULL&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nb">tuple&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-17">&lt;a class="lnlinks" href="#hl-19-17">17&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">12&lt;/span> &lt;span class="n">LOAD_CONST&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-18">&lt;a class="lnlinks" href="#hl-19-18">18&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">14&lt;/span> &lt;span class="n">LOAD_CONST&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-19">&lt;a class="lnlinks" href="#hl-19-19">19&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">16&lt;/span> &lt;span class="n">BUILD_LIST&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-20">&lt;a class="lnlinks" href="#hl-19-20">20&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">18&lt;/span> &lt;span class="n">BUILD_TUPLE&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-21">&lt;a class="lnlinks" href="#hl-19-21">21&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">20&lt;/span> &lt;span class="n">CALL&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-22">&lt;a class="lnlinks" href="#hl-19-22">22&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">28&lt;/span> &lt;span class="n">RETURN_VALUE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-23">&lt;a class="lnlinks" href="#hl-19-23">23&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">dis&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-24">&lt;a class="lnlinks" href="#hl-19-24">24&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">1&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="n">RESUME&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-25">&lt;a class="lnlinks" href="#hl-19-25">25&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-26">&lt;a class="lnlinks" href="#hl-19-26">26&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">2&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="n">LOAD_CONST&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-27">&lt;a class="lnlinks" href="#hl-19-27">27&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">4&lt;/span> &lt;span class="n">LOAD_CONST&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-28">&lt;a class="lnlinks" href="#hl-19-28">28&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">6&lt;/span> &lt;span class="n">BUILD_LIST&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-29">&lt;a class="lnlinks" href="#hl-19-29">29&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">8&lt;/span> &lt;span class="n">BUILD_TUPLE&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-19-30">&lt;a class="lnlinks" href="#hl-19-30">30&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">10&lt;/span> &lt;span class="n">RETURN_VALUE&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It might not make much sense to include this example in the article.&lt;/p>
&lt;h4 id="tuple-type" >
&lt;a href="#tuple-type" aria-label="Anchor">#&lt;/a>
&lt;code>tuple&lt;/code> type
&lt;/h4>
&lt;p>The Python&amp;rsquo;s &lt;code>tuple&lt;/code> type is defined in &lt;code>tupleobject.c&lt;/code>. Interestingly, it has no &lt;code>tp_alloc&lt;/code>, nor &lt;code>tp_init&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="ln" id="hl-20-1">&lt;a class="lnlinks" href="#hl-20-1">1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="n">PyTypeObject&lt;/span> &lt;span class="n">PyTuple_Type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-20-2">&lt;a class="lnlinks" href="#hl-20-2">2&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-20-3">&lt;a class="lnlinks" href="#hl-20-3">3&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* tp_init */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-20-4">&lt;a class="lnlinks" href="#hl-20-4">4&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* tp_alloc */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-20-5">&lt;a class="lnlinks" href="#hl-20-5">5&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">tuple_new&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* tp_new */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-20-6">&lt;a class="lnlinks" href="#hl-20-6">6&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-20-7">&lt;a class="lnlinks" href="#hl-20-7">7&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>tuple_new&lt;/code> function is responsible for allocating a new tuple object, with the items passed as a parameter.&lt;/p></description></item><item><title>Keep a Changelog</title><link>https://madebyme.today/blog/keep-a-changelog/</link><pubDate>Sat, 21 Oct 2023 23:16:09 +0200</pubDate><guid>https://madebyme.today/blog/keep-a-changelog/</guid><category>Python</category><category>Changelog</category><description>&lt;p>Recently I was tasked with initialization of a new Python project. One of the requirements was to prepare a changelog.
I liked the idea, but my gut feeling was that the future project contributors won&amp;rsquo;t keep the changelog always up-to-date
and it&amp;rsquo;s quality will decline over time. This article proposes a feature which enforces changelog updates, when it&amp;rsquo;s
required to do so.&lt;/p>
&lt;h2 id="whats-a-changelog" >
&lt;a href="#whats-a-changelog" aria-label="Anchor">#&lt;/a>
What&amp;rsquo;s a changelog
&lt;/h2>
&lt;blockquote>
&lt;p>A &lt;strong>changelog&lt;/strong> is a log or record of all notable changes made to a project. The project is often a website or
software project, and the changelog usually includes records of changes such as bug fixes, new features, etc.&lt;/p>
&lt;/blockquote>
&lt;p>from &lt;a
href="https://en.wikipedia.org/wiki/Changelog"
>Wikipedia&lt;/a>.&lt;/p>
&lt;p>The phrase &amp;ldquo;notable changes&amp;rdquo; is the key here. Not all changes to the project are required to have an entry in its
changelog: workflow updates, typo fixes in README, SonarQube settings; they all are transparent to the Python package
produced by the project.&lt;/p>
&lt;p>Let&amp;rsquo;s take a look at an example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="ln" id="hl-0-1">&lt;a class="lnlinks" href="#hl-0-1"> 1&lt;/a>&lt;/span>&lt;span class="cl">.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-2">&lt;a class="lnlinks" href="#hl-0-2"> 2&lt;/a>&lt;/span>&lt;span class="cl">├─ .github
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-3">&lt;a class="lnlinks" href="#hl-0-3"> 3&lt;/a>&lt;/span>&lt;span class="cl">│ └─ workflows
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-4">&lt;a class="lnlinks" href="#hl-0-4"> 4&lt;/a>&lt;/span>&lt;span class="cl">│ └── workflow.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-5">&lt;a class="lnlinks" href="#hl-0-5"> 5&lt;/a>&lt;/span>&lt;span class="cl">├─ docs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-6">&lt;a class="lnlinks" href="#hl-0-6"> 6&lt;/a>&lt;/span>&lt;span class="cl">│ ├─ conf.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-7">&lt;a class="lnlinks" href="#hl-0-7"> 7&lt;/a>&lt;/span>&lt;span class="cl">│ ├─ index.rst
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-8">&lt;a class="lnlinks" href="#hl-0-8"> 8&lt;/a>&lt;/span>&lt;span class="cl">│ └─ Makefile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-9">&lt;a class="lnlinks" href="#hl-0-9"> 9&lt;/a>&lt;/span>&lt;span class="cl">├─ foo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-10">&lt;a class="lnlinks" href="#hl-0-10">10&lt;/a>&lt;/span>&lt;span class="cl">│ ├─ __init__.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-11">&lt;a class="lnlinks" href="#hl-0-11">11&lt;/a>&lt;/span>&lt;span class="cl">│ └─ bar
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-12">&lt;a class="lnlinks" href="#hl-0-12">12&lt;/a>&lt;/span>&lt;span class="cl">│ ├─ __init__.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-13">&lt;a class="lnlinks" href="#hl-0-13">13&lt;/a>&lt;/span>&lt;span class="cl">│ └─ baz.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-14">&lt;a class="lnlinks" href="#hl-0-14">14&lt;/a>&lt;/span>&lt;span class="cl">├─ tests
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-15">&lt;a class="lnlinks" href="#hl-0-15">15&lt;/a>&lt;/span>&lt;span class="cl">│ ├─ __init__.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-16">&lt;a class="lnlinks" href="#hl-0-16">16&lt;/a>&lt;/span>&lt;span class="cl">│ └─ test_bar.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-17">&lt;a class="lnlinks" href="#hl-0-17">17&lt;/a>&lt;/span>&lt;span class="cl">├─ .gitignore
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-18">&lt;a class="lnlinks" href="#hl-0-18">18&lt;/a>&lt;/span>&lt;span class="cl">├─ README.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-19">&lt;a class="lnlinks" href="#hl-0-19">19&lt;/a>&lt;/span>&lt;span class="cl">├─ Makefile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-20">&lt;a class="lnlinks" href="#hl-0-20">20&lt;/a>&lt;/span>&lt;span class="cl">├─ setup.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-21">&lt;a class="lnlinks" href="#hl-0-21">21&lt;/a>&lt;/span>&lt;span class="cl">├─ MANIFEST.in
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-22">&lt;a class="lnlinks" href="#hl-0-22">22&lt;/a>&lt;/span>&lt;span class="cl">├─ pyproject.toml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-0-23">&lt;a class="lnlinks" href="#hl-0-23">23&lt;/a>&lt;/span>&lt;span class="cl">└─ Changelog.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a pretty standard (and also minimalistic!) take on a Python project. The pipeline defined in
&lt;code>.github/workflows/workflow.yaml&lt;/code> builds, tests and publishes the package. Initially project stored its version in
&lt;code>pyproject.toml&lt;/code>, while &lt;code>Changelog.md&lt;/code> contained human-readable lists of additions, fixes, and improvements for each
release. Having a standard usually makes things easier, so we adopted
&lt;a
href="https://keepachangelog.com/en/1.1.0/"
>keep a changelog&lt;/a>, which also uses
&lt;a
href="https://semver.org/spec/v2.0.0.html"
>Semantic Versioning 2.0.0&lt;/a>, so that was nice.&lt;/p>
&lt;p>&lt;a
href="https://keepachangelog.com/en/1.1.0/"
>Keep a changelog&lt;/a> is just a Markdown template &amp;ndash; it has no associated toolset.
Here&amp;rsquo;s an example of a changelog with two entries:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-md" data-lang="md">&lt;span class="line">&lt;span class="ln" id="hl-1-1">&lt;a class="lnlinks" href="#hl-1-1"> 1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="gh"># Changelog
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-2">&lt;a class="lnlinks" href="#hl-1-2"> 2&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="gh">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-3">&lt;a class="lnlinks" href="#hl-1-3"> 3&lt;/a>&lt;/span>&lt;span class="cl">All notable changes to this project will be documented in this file.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-4">&lt;a class="lnlinks" href="#hl-1-4"> 4&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-5">&lt;a class="lnlinks" href="#hl-1-5"> 5&lt;/a>&lt;/span>&lt;span class="cl">The format is based on [&lt;span class="nt">Keep a Changelog&lt;/span>](&lt;span class="na">https://keepachangelog.com/en/1.0.0/&lt;/span>),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-6">&lt;a class="lnlinks" href="#hl-1-6"> 6&lt;/a>&lt;/span>&lt;span class="cl">and this project adheres to [&lt;span class="nt">Semantic Versioning&lt;/span>](&lt;span class="na">https://semver.org/spec/v2.0.0.html&lt;/span>).
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-7">&lt;a class="lnlinks" href="#hl-1-7"> 7&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-8">&lt;a class="lnlinks" href="#hl-1-8"> 8&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="gu">## [1.2.0] - 2023-10-01
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-9">&lt;a class="lnlinks" href="#hl-1-9"> 9&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="gu">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-10">&lt;a class="lnlinks" href="#hl-1-10">10&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="gu">### Added
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-11">&lt;a class="lnlinks" href="#hl-1-11">11&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="gu">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-12">&lt;a class="lnlinks" href="#hl-1-12">12&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="k">-&lt;/span> Support for Python 3.12.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-13">&lt;a class="lnlinks" href="#hl-1-13">13&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="k">-&lt;/span> Utility for parsing &lt;span class="sb">`foo`&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-14">&lt;a class="lnlinks" href="#hl-1-14">14&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-15">&lt;a class="lnlinks" href="#hl-1-15">15&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="gu">### Fixed
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-16">&lt;a class="lnlinks" href="#hl-1-16">16&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="gu">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-17">&lt;a class="lnlinks" href="#hl-1-17">17&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="k">-&lt;/span> Worker subprocesses are now correctly closed.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-18">&lt;a class="lnlinks" href="#hl-1-18">18&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-19">&lt;a class="lnlinks" href="#hl-1-19">19&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="gu">### Changed
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-20">&lt;a class="lnlinks" href="#hl-1-20">20&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="gu">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-21">&lt;a class="lnlinks" href="#hl-1-21">21&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="k">-&lt;/span> Update &lt;span class="sb">`pylint`&lt;/span> version to &lt;span class="sb">`~= 2.17`&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-22">&lt;a class="lnlinks" href="#hl-1-22">22&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-23">&lt;a class="lnlinks" href="#hl-1-23">23&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="gu">## [1.1.2] - 2019-02-15
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-24">&lt;a class="lnlinks" href="#hl-1-24">24&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="gu">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-25">&lt;a class="lnlinks" href="#hl-1-25">25&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="gu">### Fixed
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-26">&lt;a class="lnlinks" href="#hl-1-26">26&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="gu">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-1-27">&lt;a class="lnlinks" href="#hl-1-27">27&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="k">-&lt;/span> Typo in project&amp;#39;s title in docs.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="keeping-a-changelog-up-to-date" >
&lt;a href="#keeping-a-changelog-up-to-date" aria-label="Anchor">#&lt;/a>
Keep(ing) a changelog up-to-date
&lt;/h2>
&lt;p>When releasing a new package version one needs to remember to update the version in two places: &lt;code>pyproject.toml&lt;/code> and
&lt;code>Changelog.md&lt;/code>. Also, there&amp;rsquo;s no mechanism to enforce that behavior; we could create a workflow step to validate that
both places are in sync, but relaying on CI to inform contributors about the necessary changes seems far from ideal.&lt;/p>
&lt;p>Instead, we made &lt;code>Changelog.md&lt;/code> the only place where the version can be updated. &lt;code>pyproject.toml&lt;/code> expects the version to
be statically defined; we can disable that behavior by marking the version as &lt;em>dynamic&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="line">&lt;span class="ln" id="hl-2-1">&lt;a class="lnlinks" href="#hl-2-1"> 1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">build-system&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-2-2">&lt;a class="lnlinks" href="#hl-2-2"> 2&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="nx">requires&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;setuptools&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;wheel&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-2-3">&lt;a class="lnlinks" href="#hl-2-3"> 3&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="nx">build-backend&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;setuptools.build_meta&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-2-4">&lt;a class="lnlinks" href="#hl-2-4"> 4&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-2-5">&lt;a class="lnlinks" href="#hl-2-5"> 5&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">project&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-2-6">&lt;a class="lnlinks" href="#hl-2-6"> 6&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="nx">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;foo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-2-7">&lt;a class="lnlinks" href="#hl-2-7"> 7&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="nx">readme&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;README.md&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-2-8">&lt;a class="lnlinks" href="#hl-2-8"> 8&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="nx">requires-python&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;gt;=3.9&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-2-9">&lt;a class="lnlinks" href="#hl-2-9"> 9&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="nx">dependencies&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-2-10">&lt;a class="lnlinks" href="#hl-2-10">10&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="s2">&amp;#34;requests&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-2-11">&lt;a class="lnlinks" href="#hl-2-11">11&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-2-12">&lt;a class="lnlinks" href="#hl-2-12">12&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="nx">dynamic&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c"># &amp;lt;----&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The version still needs to be defined somewhere, and using &lt;code>setup.py&lt;/code> for that purpose gives us an advantage &amp;ndash; we can
execute an arbitrary Python code there.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="ln" id="hl-3-1">&lt;a class="lnlinks" href="#hl-3-1"> 1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">re&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-2">&lt;a class="lnlinks" href="#hl-3-2"> 2&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pathlib&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Path&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-3">&lt;a class="lnlinks" href="#hl-3-3"> 3&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Generator&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-4">&lt;a class="lnlinks" href="#hl-3-4"> 4&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-5">&lt;a class="lnlinks" href="#hl-3-5"> 5&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">setuptools&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">setup&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-6">&lt;a class="lnlinks" href="#hl-3-6"> 6&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-7">&lt;a class="lnlinks" href="#hl-3-7"> 7&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-8">&lt;a class="lnlinks" href="#hl-3-8"> 8&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">__get_versions&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Generator&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">tuple&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-9">&lt;a class="lnlinks" href="#hl-3-9"> 9&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">dir_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vm">__file__&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-10">&lt;a class="lnlinks" href="#hl-3-10">10&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dir_name&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="s2">&amp;#34;Changelog.md&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;r&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-11">&lt;a class="lnlinks" href="#hl-3-11">11&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">lines&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">readlines&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-12">&lt;a class="lnlinks" href="#hl-3-12">12&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-13">&lt;a class="lnlinks" href="#hl-3-13">13&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">lines&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-14">&lt;a class="lnlinks" href="#hl-3-14">14&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">r&lt;/span>&lt;span class="s2">&amp;#34;^##\s+\[(\d+\.\d+\.\d+)\]&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-15">&lt;a class="lnlinks" href="#hl-3-15">15&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-16">&lt;a class="lnlinks" href="#hl-3-16">16&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-17">&lt;a class="lnlinks" href="#hl-3-17">17&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">yield&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-18">&lt;a class="lnlinks" href="#hl-3-18">18&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-19">&lt;a class="lnlinks" href="#hl-3-19">19&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-20">&lt;a class="lnlinks" href="#hl-3-20">20&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">__get_highest_version&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-21">&lt;a class="lnlinks" href="#hl-3-21">21&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">highest_version&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">__get_versions&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-22">&lt;a class="lnlinks" href="#hl-3-22">22&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;.&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">highest_version&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-23">&lt;a class="lnlinks" href="#hl-3-23">23&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-24">&lt;a class="lnlinks" href="#hl-3-24">24&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-25">&lt;a class="lnlinks" href="#hl-3-25">25&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="n">setup&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-26">&lt;a class="lnlinks" href="#hl-3-26">26&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">version&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">__get_highest_version&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-3-27">&lt;a class="lnlinks" href="#hl-3-27">27&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now the only place where package&amp;rsquo;s version needs to be updated is the changelog itself. Note that this change does not
enforce updating the changelog for every change. However, to release a new version of the package one is required to
add a new changelog entry.&lt;/p>
&lt;p>Now, since the presence of &lt;code>Changelog.md&lt;/code> is necessary for the build to succeed, we should inform the build system about
this dependency. &lt;code>MANIFEST.in&lt;/code> contains include/exclude patters for non-standard files (see
&lt;a
href="https://packaging.python.org/en/latest/guides/using-manifest-in/"
>official docs&lt;/a>). Add the following line to the
manifest:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="ln" id="hl-4-1">&lt;a class="lnlinks" href="#hl-4-1">1&lt;/a>&lt;/span>&lt;span class="cl"># ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-4-2">&lt;a class="lnlinks" href="#hl-4-2">2&lt;/a>&lt;/span>&lt;span class="cl">include Changelog.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="accessing-project-version-from-sphinx" >
&lt;a href="#accessing-project-version-from-sphinx" aria-label="Anchor">#&lt;/a>
Accessing project version from Sphinx
&lt;/h3>
&lt;p>&lt;a
href="https://www.sphinx-doc.org/en/master/"
>Sphinx&lt;/a> is a most popular tool for generating documentation out of Python source
files. It keeps its configuration in the &lt;code>conf.py&lt;/code> file, which has two special attributes related to the project&amp;rsquo;s
version:&lt;/p>
&lt;ul>
&lt;li>&lt;code>version&lt;/code> &amp;ndash; the major project version (see
&lt;a
href="https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-version"
>official documentation&lt;/a>),&lt;/li>
&lt;li>&lt;code>release&lt;/code> &amp;ndash; the full project version (see
&lt;a
href="https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-release"
>official documentation&lt;/a>).&lt;/li>
&lt;/ul>
&lt;p>With the current setup it&amp;rsquo;s hard for Sphinx to read the version, since it&amp;rsquo;s only accessible from &lt;code>setup.py&lt;/code>. The easiest
workaround is to extract the parsing to an external module and then use that module as a dependency in both &lt;code>conf.py&lt;/code>
and &lt;code>setup.py&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="ln" id="hl-5-1">&lt;a class="lnlinks" href="#hl-5-1"> 1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="c1"># version.py&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-2">&lt;a class="lnlinks" href="#hl-5-2"> 2&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">re&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-3">&lt;a class="lnlinks" href="#hl-5-3"> 3&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pathlib&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Path&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-4">&lt;a class="lnlinks" href="#hl-5-4"> 4&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Generator&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-5">&lt;a class="lnlinks" href="#hl-5-5"> 5&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-6">&lt;a class="lnlinks" href="#hl-5-6"> 6&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">setuptools&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">setup&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-7">&lt;a class="lnlinks" href="#hl-5-7"> 7&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-8">&lt;a class="lnlinks" href="#hl-5-8"> 8&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-9">&lt;a class="lnlinks" href="#hl-5-9"> 9&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">__get_versions&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Generator&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">tuple&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-10">&lt;a class="lnlinks" href="#hl-5-10">10&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">dir_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vm">__file__&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parent&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-11">&lt;a class="lnlinks" href="#hl-5-11">11&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dir_name&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="s2">&amp;#34;Changelog.md&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;r&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-12">&lt;a class="lnlinks" href="#hl-5-12">12&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">lines&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">readlines&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-13">&lt;a class="lnlinks" href="#hl-5-13">13&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-14">&lt;a class="lnlinks" href="#hl-5-14">14&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">lines&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-15">&lt;a class="lnlinks" href="#hl-5-15">15&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">r&lt;/span>&lt;span class="s2">&amp;#34;^##\s+\[(\d+\.\d+\.\d+)\]&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-16">&lt;a class="lnlinks" href="#hl-5-16">16&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-17">&lt;a class="lnlinks" href="#hl-5-17">17&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-18">&lt;a class="lnlinks" href="#hl-5-18">18&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">yield&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-19">&lt;a class="lnlinks" href="#hl-5-19">19&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-20">&lt;a class="lnlinks" href="#hl-5-20">20&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-21">&lt;a class="lnlinks" href="#hl-5-21">21&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">__get_highest_version&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-22">&lt;a class="lnlinks" href="#hl-5-22">22&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">highest_version&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">__get_versions&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-23">&lt;a class="lnlinks" href="#hl-5-23">23&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;.&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">highest_version&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-24">&lt;a class="lnlinks" href="#hl-5-24">24&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-25">&lt;a class="lnlinks" href="#hl-5-25">25&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-5-26">&lt;a class="lnlinks" href="#hl-5-26">26&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="n">version&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">__get_highest_version&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After that we can import the module in &lt;code>setup.py&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="ln" id="hl-6-1">&lt;a class="lnlinks" href="#hl-6-1">1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">setuptools&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">setup&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-6-2">&lt;a class="lnlinks" href="#hl-6-2">2&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-6-3">&lt;a class="lnlinks" href="#hl-6-3">3&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">version&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">version&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-6-4">&lt;a class="lnlinks" href="#hl-6-4">4&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-6-5">&lt;a class="lnlinks" href="#hl-6-5">5&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="n">setup&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-6-6">&lt;a class="lnlinks" href="#hl-6-6">6&lt;/a>&lt;/span>&lt;span class="cl"> &lt;span class="n">version&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">__get_highest_version&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-6-7">&lt;a class="lnlinks" href="#hl-6-7">7&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip; and &lt;code>conf.py&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="ln" id="hl-7-1">&lt;a class="lnlinks" href="#hl-7-1"> 1&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-2">&lt;a class="lnlinks" href="#hl-7-2"> 2&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pathlib&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Path&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-3">&lt;a class="lnlinks" href="#hl-7-3"> 3&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-4">&lt;a class="lnlinks" href="#hl-7-4"> 4&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="n">project&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;foo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-5">&lt;a class="lnlinks" href="#hl-7-5"> 5&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="n">copyright&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;2023&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-6">&lt;a class="lnlinks" href="#hl-7-6"> 6&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="n">author&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Kamil Rusin&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-7">&lt;a class="lnlinks" href="#hl-7-7"> 7&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-8">&lt;a class="lnlinks" href="#hl-7-8"> 8&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="n">root_dir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vm">__file__&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parents&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-9">&lt;a class="lnlinks" href="#hl-7-9"> 9&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root_dir&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-10">&lt;a class="lnlinks" href="#hl-7-10">10&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-11">&lt;a class="lnlinks" href="#hl-7-11">11&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">version&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">version&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">__project_version&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-12">&lt;a class="lnlinks" href="#hl-7-12">12&lt;/a>&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-13">&lt;a class="lnlinks" href="#hl-7-13">13&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="n">version&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">__project_version&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-7-14">&lt;a class="lnlinks" href="#hl-7-14">14&lt;/a>&lt;/span>&lt;span class="cl">&lt;span class="n">release&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">version&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Again, we cannot forget about informing the build system about the new dependency in &lt;code>MANIFEST.in&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="ln" id="hl-8-1">&lt;a class="lnlinks" href="#hl-8-1">1&lt;/a>&lt;/span>&lt;span class="cl"># ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-8-2">&lt;a class="lnlinks" href="#hl-8-2">2&lt;/a>&lt;/span>&lt;span class="cl">include Changelog.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln" id="hl-8-3">&lt;a class="lnlinks" href="#hl-8-3">3&lt;/a>&lt;/span>&lt;span class="cl">include version.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="afterthought" >
&lt;a href="#afterthought" aria-label="Anchor">#&lt;/a>
Afterthought
&lt;/h2>
&lt;p>Maintaining a changelog can make a project easier to understand. Hopefully, with the changes proposed in this article
you&amp;rsquo;ll find changelogs more manageable. This feature does not enforce changelog updates from the contributors &amp;ndash; they
will only need to do so, when they want to release a new version of the package.&lt;/p>
&lt;p>I &lt;em>highly&lt;/em> encourage to always release a new version even for the smallest change in the project sources that is
observable for the users. Whether it&amp;rsquo;s worth to add changelog entries for project&amp;rsquo;s meta updates, is up to you.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;figure class="img-thumbnail">&lt;img src="./jasper-garratt-esc26JcEdek-unsplash.webp"
alt="Log" class="img-thumbnail"loading="lazy"
/>&lt;figcaption>
&lt;p>Photo by &lt;a
href="https://unsplash.com/@jaspergarrattphotography?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash"
>Jasper Garratt&lt;/a> on &lt;a
href="https://unsplash.com/photos/green-moss-on-brown-tree-trunk-esc26JcEdek?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash"
>Unsplash&lt;/a>&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;!-- raw HTML omitted --></description></item></channel></rss>